// Function Prototypes
#include "EV3Servo-lib-UW.c"
/*void searchAndCollectBlocks(int targetColor, int blockCount);
bool driveToBlock();
bool checkColor(int targetColor);
void graspBlock();
void releaseBlock();*/
// Function to get color selection from user

int getColorSelection() {
	int colorSelection = 1;

	while (!getButtonPress(buttonEnter)) {
		if (getButtonPress(buttonRight)) {
			colorSelection +=1;
		}
		if (getButtonPress(buttonLeft)) {
			colorSelection -=1;
			eraseDisplay();
		}
		if (colorSelection > 6) {
			colorSelection = 1;
		}
		if (colorSelection < 1) {
			colorSelection = 6;
		}

  	if (colorSelection == 1) {
			eraseDisplay();
    	displayString(1, "Red");
    }
    if (colorSelection == 2) {
    	eraseDisplay();
    	displayString(1, "Blue");
    }
    if (colorSelection == 3) {
    	eraseDisplay();
    	displayString(1, "Yellow");
    }
    if (colorSelection == 4) {
    	eraseDisplay();
    	displayString(1, "Green");
    }
	}
	if(colorSelection < 1 || colorSelection > 6) {
  	displayString(7, "Invalid selection.");
  	wait1Msec(1000);
  	eraseDisplay();
  }

  eraseDisplay();

	// Map selection to color sensor values
  switch(colorSelection) {
    case 1: return (int)colorRed;
		case 2: return (int)colorBlue;
		case 3: return (int)colorYellow;
		case 4: return (int)colorGreen;
		default: return -1;  // Fallback, should never occur
	}
}

// Function to get block count from user
/*int getBlockCount() {
    int blockCount = 0;

    displayString(0, "Enter Block Count:");
    displayString(1, "Press buttons (1-9)");

    while(blockCount < 1 || blockCount > 9) {  // Ensure valid block count
        while(getButtonPress(buttonEnter) == -1) { }  // Wait for button press
        blockCount = buttonEnter;  // Capture button press value
        wait1Msec(500);  // Debounce delay

        if(blockCount < 1 || blockCount > 9) {
            displayString(2, "Invalid count. Retry");
            wait1Msec(1000);
            eraseDisplay();
        }
    }
    eraseDisplay();
    return blockCount;
}*/

task main() {
    int targetColor = getColorSelection();  // Get color from user
    //int blockCount = getBlockCount();       // Get block count from user

    eraseDisplay();

    displayString(1,"%d", targetColor);
    //displayString(10,"%d", blockCount);
    //searchAndCollectBlocks(targetColor, blockCount);  // Start block collection process
}

// Main search and collection routine
/*void searchAndCollectBlocks(int targetColor, int blockCount) {
    int collectedBlocks = 0;

    while(collectedBlocks < blockCount) {
        if(driveToBlock()) {
            graspBlock();  // Attempt to pick up block

            if(checkColor(targetColor)) {
                releaseBlock();  // Release if correct color
                collectedBlocks++;  // Count towards target
            } else {
                releaseBlock();  // Release block if incorrect color
            }
        }
    }
}

// Drives towards a detected block using IR sensor
bool driveToBlock() {
    while(SensorValue[IRSensor] < 5) {  // Adjust threshold as needed
        motor[leftMotor] = 50;
        motor[rightMotor] = 50;
    }
    motor[leftMotor] = 0;
    motor[rightMotor] = 0;

    // Verify if block is really there (e.g., check touch sensor)
    return SensorValue[touchSensor] == 1;
}

// Checks if the current block color matches the target color
bool checkColor(int targetColor) {
    return SensorValue[colorSensor] == targetColor;
}

// Closes the gripper to grasp the block
void graspBlock() {
    motor[servoMotor] = -100;  // Close gripper
    wait1Msec(1000);
}

// Opens the gripper to release the block
void releaseBlock() {
    motor[servoMotor] = 100;  // Open gripper
    wait1Msec(1000);
}
*/
